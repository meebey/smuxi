SUBDIRS =	SmartIrc4net \
			$(MESSAGINGMENU_SHARP_SUBDIR)

if WITH_MESSAGINGMENU_SHARP_INCLUDED
MESSAGINGMENU_SHARP_SUBDIR = messagingmenu-sharp
else
# HACK: override DIST_SUBDIRS so distcheck/distclean works on systems without
# libmessaging-menu-dev installed
DIST_SUBDIRS = $(SUBDIRS)
endif

OUTPUT_DIR = $(top_builddir)/bin/$(PROFILE)
OBJECT_DIR = $(OUTPUT_DIR)/obj
SOURCE_PATTERNS = *.cs */*.cs */*/*.cs */*/*/*.cs */*/*/*/*.cs */*/*/*/*/*.cs
XBUILD_FLAGS +=  /p:Configuration=Debug /p:SignAssembly=false /p:WarningLevel=0 /p:Warn=0 /p:OutputPath=$(abspath $(OUTPUT_DIR)) /p:BaseIntermediateOutputPath=$(abspath $(OBJECT_DIR))/ /p:IntermediateOutputPath=$(abspath $(OBJECT_DIR))/ /p:DocumentationFile=

SERVICESTACK_TEXT_SUBDIR = ServiceStack.Text
SERVICESTACK_TEXT_SRCDIR = $(srcdir)/$(SERVICESTACK_TEXT_SUBDIR)/src/ServiceStack.Text
SERVICESTACK_TEXT_SOURCE_FILES = $(foreach pattern, $(SOURCE_PATTERNS), $(wildcard $(SERVICESTACK_TEXT_SRCDIR)/$(pattern)))
SERVICESTACK_TEXT_EXTRA_FILES = $(SERVICESTACK_TEXT_BUILD_FILE)
SERVICESTACK_TEXT_ASSEMBLY_NAME = ServiceStack.Text.dll
SERVICESTACK_TEXT_ASSEMBLY_TARGET = $(OUTPUT_DIR)/$(SERVICESTACK_TEXT_ASSEMBLY_NAME)
SERVICESTACK_TEXT_BUILD_FILE = $(SERVICESTACK_TEXT_SRCDIR)/ServiceStack.Text.csproj
SERVICESTACK_TEXT_XBUILD_FLAGS = $(XBUILD_FLAGS)

SERVICESTACK_SUBDIR = ServiceStack
SERVICESTACK_SRCDIR = $(srcdir)/$(SERVICESTACK_SUBDIR)
SERVICESTACK_INTERFACES_SRCDIR = $(srcdir)/$(SERVICESTACK_SUBDIR)/src/ServiceStack.Interfaces
SERVICESTACK_INTERFACES_SOURCE_FILES = $(foreach pattern, $(SOURCE_PATTERNS), $(wildcard $(SERVICESTACK_INTERFACES_SRCDIR)/$(pattern)))
SERVICESTACK_INTERFACES_EXTRA_FILES = $(SERVICESTACK_INTERFACES_BUILD_FILE)
SERVICESTACK_INTERFACES_ASSEMBLY_NAME = ServiceStack.Interfaces.dll
SERVICESTACK_INTERFACES_ASSEMBLY_TARGET = $(OUTPUT_DIR)/$(SERVICESTACK_INTERFACES_ASSEMBLY_NAME)
SERVICESTACK_INTERFACES_BUILD_FILE = $(SERVICESTACK_INTERFACES_SRCDIR)/ServiceStack.Interfaces.csproj
SERVICESTACK_INTERFACES_XBUILD_FLAGS = $(XBUILD_FLAGS)
SERVICESTACK_COMMON_SRCDIR = $(srcdir)/$(SERVICESTACK_SUBDIR)/src/ServiceStack.Common
SERVICESTACK_COMMON_SOURCE_FILES = $(foreach pattern, $(SOURCE_PATTERNS), $(wildcard $(SERVICESTACK_COMMON_SRCDIR)/$(pattern)))
SERVICESTACK_COMMON_EXTRA_FILES = $(SERVICESTACK_COMMON_BUILD_FILE)
SERVICESTACK_COMMON_ASSEMBLY_NAME = ServiceStack.Common.dll
SERVICESTACK_COMMON_ASSEMBLY_TARGET = $(OUTPUT_DIR)/$(SERVICESTACK_COMMON_ASSEMBLY_NAME)
SERVICESTACK_COMMON_BUILD_FILE = $(SERVICESTACK_COMMON_SRCDIR)/ServiceStack.Common.csproj
SERVICESTACK_COMMON_XBUILD_FLAGS = $(XBUILD_FLAGS)

EXTRA_SERVICESTACK_LIBS = \
	$(SERVICESTACK_TEXT_ASSEMBLY_TARGET) $(SERVICESTACK_TEXT_ASSEMBLY_TARGET).mdb \
	$(SERVICESTACK_INTERFACES_ASSEMBLY_TARGET) $(SERVICESTACK_INTERFACES_ASSEMBLY_TARGET).mdb \
	$(SERVICESTACK_COMMON_ASSEMBLY_TARGET) $(SERVICESTACK_COMMON_ASSEMBLY_TARGET).mdb

JSON_SUBDIR = Newtonsoft.Json
JSON_SRCDIR = $(srcdir)/$(JSON_SUBDIR)/Src/Newtonsoft.Json
JSON_SOURCE_FILES = $(foreach pattern, $(SOURCE_PATTERNS), $(wildcard $(JSON_SRCDIR)/$(pattern)))
JSON_EXTRA_FILES = \
	$(JSON_BUILD_FILE) \
	$(JSON_SRCDIR)/Dynamic.snk
JSON_CLEAN_FILES = $(OBJECT_DIR)/Newtonsoft.Json.Dynamic.snk
JSON_ASSEMBLY_NAME = Newtonsoft.Json.dll
JSON_ASSEMBLY_TARGET = $(OUTPUT_DIR)/$(JSON_ASSEMBLY_NAME)
JSON_BUILD_FILE = $(JSON_SRCDIR)/Newtonsoft.Json.csproj
JSON_XBUILD_FLAGS = $(XBUILD_FLAGS)

TWITTERIZER_SUBDIR = Twitterizer
TWITTERIZER_SRCDIR = $(srcdir)/$(TWITTERIZER_SUBDIR)/Twitterizer2
TWITTERIZER_SOURCE_FILES = $(foreach pattern, ../*.cs $(SOURCE_PATTERNS), $(wildcard $(TWITTERIZER_SRCDIR)/$(pattern)))
TWITTERIZER_EXTRA_FILES = \
	$(TWITTERIZER_BUILD_FILE) \
	$(TWITTERIZER_SRCDIR)/Twitterizer2.snk \
	$(TWITTERIZER_SRCDIR)/../CommonAssemblyInfo.cs \
	$(TWITTERIZER_SRCDIR)/../GettingStarted.txt \
	$(TWITTERIZER_SRCDIR)/../Json.NET.license.txt \
	$(TWITTERIZER_SRCDIR)/../Twitterizer2.license.txt
TWITTERIZER_CLEAN_FILES = \
	$(OUTPUT_DIR)/.license.txt \
	$(OUTPUT_DIR)/Twitterizer2.license.txt \
	$(OUTPUT_DIR)/Json.NET.license.txt \
	$(OUTPUT_DIR)/GettingStarted.txt
TWITTERIZER_ASSEMBLY_NAME = Twitterizer2.dll
TWITTERIZER_ASSEMBLY_TARGET = $(OUTPUT_DIR)/$(TWITTERIZER_ASSEMBLY_NAME)
TWITTERIZER_BUILD_FILE = $(TWITTERIZER_SRCDIR)/Twitterizer2.csproj
TWITTERIZER_XBUILD_FLAGS = $(XBUILD_FLAGS) /p:PostBuildEvent=

JABBER_NET_SUBDIR = agsxmpp/agsxmpp
JABBER_NET_SRCDIR = $(srcdir)/$(JABBER_NET_SUBDIR)
JABBER_NET_SOURCE_FILES = $(foreach pattern, $(SOURCE_PATTERNS), $(wildcard $(JABBER_NET_SRCDIR)/$(pattern)))
JABBER_NET_EXTRA_FILES =
JABBER_NET_CLEAN_FILES = $(wildcard $(OBJECT_DIR)/*.bmp)
JABBER_NET_ASSEMBLY_NAME = agsXMPP.dll
JABBER_NET_ASSEMBLY_TARGET = $(OUTPUT_DIR)/$(JABBER_NET_ASSEMBLY_NAME)
JABBER_NET_BUILD_FILE = $(JABBER_NET_SRCDIR)/agsXMPP2010.csproj
JABBER_NET_XBUILD_FLAGS = $(XBUILD_FLAGS)

DB4O_SUBDIR = db4o-net
DB4O_SRCDIR = $(srcdir)/$(DB4O_SUBDIR)/Db4objects.Db4o
DB4O_SOURCE_FILES = $(foreach pattern, $(SOURCE_PATTERNS), $(wildcard $(DB4O_SRCDIR)/$(pattern)))
DB4O_EXTRA_FILES = $(DB4O_BUILD_FILE)
DB4O_ASSEMBLY_NAME = Db4objects.Db4o.dll
DB4O_ASSEMBLY_TARGET = $(OUTPUT_DIR)/$(DB4O_ASSEMBLY_NAME)
DB4O_BUILD_FILE = $(DB4O_SRCDIR)/Db4objects.Db4o-2008.csproj
DB4O_XBUILD_FLAGS = $(XBUILD_FLAGS) /property:DefineConstants="NET_3_5,MONO,EMBEDDED"

#DB4O_INSTR_SRCDIR = $(srcdir)/$(DB4O_SUBDIR)/Db4objects.Db4o.Instrumentation
#DB4O_INSTR_SOURCE_FILES = $(foreach pattern, $(SOURCE_PATTERNS), $(wildcard $(DB4O_INSTR_SRCDIR)/$(pattern)))
#DB4O_INSTR_ASSEMBLY_NAME = Db4objects.Db4o.Instrumentation.dll
#DB4O_INSTR_ASSEMBLY_TARGET = $(OUTPUT_DIR)/$(DB4O_INSTR_ASSEMBLY_NAME)
#DB4O_INSTR_BUILD_FILE = $(DB4O_INSTR_SRCDIR)/Db4objects.Db4o.Instrumentation-2008.csproj
#DB4O_INSTR_XBUILD_FLAGS = $(DB4O_XBUILD_FLAGS)

#DB4O_NQ_SRCDIR = $(srcdir)/$(DB4O_SUBDIR)/Db4objects.Db4o.NativeQueries
#DB4O_NQ_SOURCE_FILES = $(foreach pattern, $(SOURCE_PATTERNS), $(wildcard $(DB4O_NQ_SRCDIR)/$(pattern)))
#DB4O_NQ_ASSEMBLY_NAME = Db4objects.Db4o.NativeQueries.dll
#DB4O_NQ_ASSEMBLY_TARGET = $(OUTPUT_DIR)/$(DB4O_NQ_ASSEMBLY_NAME)
#DB4O_NQ_BUILD_FILE = $(DB4O_NQ_SRCDIR)/Db4objects.Db4o.NativeQueries-2008.csproj
#DB4O_NQ_XBUILD_FLAGS = $(DB4O_XBUILD_FLAGS)

SIGNALR_CLIENT_SUBDIR = SignalR
SIGNALR_CLIENT_SRCDIR = $(srcdir)/$(SIGNALR_CLIENT_SUBDIR)/src/Microsoft.AspNet.SignalR.Client
SIGNALR_CLIENT_SOURCE_FILES = $(foreach pattern, $(SOURCE_PATTERNS), $(wildcard $(SIGNALR_CLIENT_SRCDIR)/$(pattern))) \
	$(foreach file, ../Common/CommonAssemblyInfo.cs ../Common/CommonVersionInfo.cs ../Microsoft.AspNet.SignalR.Core/Infrastructure/CancellationTokenExtensions.cs ../Microsoft.AspNet.SignalR.Core/Infrastructure/DisposableAction.cs ../Microsoft.AspNet.SignalR.Core/Infrastructure/Disposer.cs ../Microsoft.AspNet.SignalR.Core/Infrastructure/ExceptionsExtensions.cs ../Microsoft.AspNet.SignalR.Core/TaskAsyncHelper.cs, $(SIGNALR_CLIENT_SRCDIR)/$(file))
SIGNALR_CLIENT_EXTRA_FILES = \
	$(SIGNALR_CLIENT_BUILD_FILE) \
	$(SIGNALR_CLIENT_SRCDIR)/Resources.resx \
	$(SIGNALR_CLIENT_SRCDIR)/../Common/Microsoft.AspNet.SignalR.targets
#SIGNALR_CLIENT_CLEAN_FILES = $(OBJECT_DIR)/Newtonsoft.Json.Dynamic.snk
SIGNALR_CLIENT_ASSEMBLY_NAME = Microsoft.AspNet.SignalR.Client.dll
SIGNALR_CLIENT_ASSEMBLY_TARGET = $(OUTPUT_DIR)/$(SIGNALR_CLIENT_ASSEMBLY_NAME)
SIGNALR_CLIENT_BUILD_FILE = $(SIGNALR_CLIENT_SRCDIR)/Microsoft.AspNet.SignalR.Client.csproj
SIGNALR_CLIENT_XBUILD_FLAGS = $(XBUILD_FLAGS) /property:DefineConstants="MONO"

JABBR_CLIENT_SUBDIR = JabbR
JABBR_CLIENT_SRCDIR = $(srcdir)/$(JABBR_CLIENT_SUBDIR)/JabbR.Client
JABBR_CLIENT_SOURCE_FILES = $(foreach pattern, $(SOURCE_PATTERNS), $(wildcard $(JABBR_CLIENT_SRCDIR)/$(pattern)))
JABBR_CLIENT_EXTRA_FILES = \
	$(JABBR_CLIENT_BUILD_FILE) \
	$(JABBR_CLIENT_SRCDIR)/../JabbR/Models/ClientMessage.cs \
	$(JABBR_CLIENT_SRCDIR)/../JabbR/Models/ClientNotification.cs
#JABBR_CLIENT_CLEAN_FILES = $(OBJECT_DIR)/Newtonsoft.Json.Dynamic.snk
JABBR_CLIENT_ASSEMBLY_NAME = JabbR.Client.dll
JABBR_CLIENT_ASSEMBLY_TARGET = $(OUTPUT_DIR)/$(JABBR_CLIENT_ASSEMBLY_NAME)
JABBR_CLIENT_BUILD_FILE = $(JABBR_CLIENT_SRCDIR)/JabbR.Client.csproj
JABBR_CLIENT_XBUILD_FLAGS = $(XBUILD_FLAGS)

# magic automake variables
if ENABLE_ENGINE_TWITTER
EXTRA_JSON_LIBS = \
	$(JSON_ASSEMBLY_TARGET) $(JSON_ASSEMBLY_TARGET).mdb
EXTRA_TWITTER_LIBS = \
	$(TWITTERIZER_ASSEMBLY_TARGET) $(TWITTERIZER_ASSEMBLY_TARGET).mdb
endif
if ENABLE_ENGINE_XMPP
EXTRA_XMPP_LIBS = \
	$(JABBER_NET_ASSEMBLY_TARGET) $(JABBER_NET_ASSEMBLY_TARGET).mdb
endif
if ENABLE_ENGINE_JABBR
EXTRA_JSON_LIBS = \
	$(JSON_ASSEMBLY_TARGET) $(JSON_ASSEMBLY_TARGET).mdb
EXTRA_JABBR_LIBS = \
	$(SIGNALR_CLIENT_ASSEMBLY_TARGET) $(SIGNALR_CLIENT_ASSEMBLY_TARGET).mdb \
	$(JABBR_CLIENT_ASSEMBLY_TARGET) $(JABBR_CLIENT_ASSEMBLY_TARGET).mdb
endif
if BUNDLE_DB4O
EXTRA_DB4O_LIBS = \
	$(DB4O_ASSEMBLY_TARGET) $(DB4O_ASSEMBLY_TARGET).mdb
#	$(DB4O_INSTR_ASSEMBLY_TARGET) $(DB4O_INSTR_ASSEMBLY_TARGET).mdb \
#	$(DB4O_NQ_ASSEMBLY_TARGET) $(DB4O_NQ_ASSEMBLY_TARGET).mdb
endif
pkgappdir = $(pkglibdir)
pkgapp_DATA = \
	$(EXTRA_SERVICESTACK_LIBS) \
	$(EXTRA_JSON_LIBS) \
	$(EXTRA_TWITTER_LIBS) \
	$(EXTRA_XMPP_LIBS) \
	$(EXTRA_DB4O_LIBS) \
	$(EXTRA_JABBR_LIBS)


EXTRA_DIST = \
	$(SERVICESTACK_TEXT_SRCDIR) $(SERVICESTACK_TEXT_EXTRA_FILES) \
	$(SERVICESTACK_INTERFACES_SRCDIR) $(SERVICESTACK_INTERFACES_EXTRA_FILES) \
	$(SERVICESTACK_COMMON_SRCDIR) $(SERVICESTACK_COMMON_EXTRA_FILES) \
	$(JSON_SRCDIR) $(JSON_EXTRA_FILES) \
	$(TWITTERIZER_SRCDIR) $(TWITTERIZER_EXTRA_FILES) \
	$(JABBER_NET_SRCDIR) $(JABBER_NET_EXTRA_FILES) \
	$(DB4O_SRCDIR) $(DB4O_EXTRA_FILES) \
	$(SIGNALR_CLIENT_SOURCE_FILES) $(SIGNALR_CLIENT_EXTRA_FILES) \
	$(JABBR_CLIENT_SOURCE_FILES) $(JABBR_CLIENT_EXTRA_FILES)

#	 $(SERVICESTACK_TEXT_SOURCE_FILES) $(SERVICESTACK_TEXT_BUILD_FILE) \
#	 $(SERVICESTACK_INTERFACES_SOURCE_FILES) $(SERVICESTACK_INTERFACES_BUILD_FILE) \
#	 $(SERVICESTACK_COMMON_SOURCE_FILES) $(SERVICESTACK_COMMON_BUILD_FILE) \
#	 $(JSON_SOURCE_FILES) $(JSON_BUILD_FILE) $(JSON_SRCDIR)/Dynamic.snk \
#	 $(TWITTERIZER_SOURCE_FILES) $(TWITTERIZER_EXTRA_FILES) $(TWITTERIZER_BUILD_FILE) \
#	 $(JABBER_NET_SOURCE_FILES) $(JABBER_NET_EXTRA_FILES) $(JABBER_NET_BUILD_FILE) \
#	 $(DB4O_SOURCE_FILES) $(DB4O_BUILD_FILE) \
#	 $(DB4O_INSTR_SOURCE_FILES) $(DB4O_INSTR_BUILD_FILE) \
#	 $(DB4O_NQ_SOURCE_FILES) $(DB4O_NQ_BUILD_FILE)

CLEANFILES = \
	$(JSON_CLEAN_FILES) \
	$(JABBER_NET_CLEAN_FILES) \
	$(TWITTERIZER_CLEAN_FILES) \
	$(SIGNALR_CLIENT_CLEAN_FILES) \
	$(JABBR_CLIENT_CLEAN_FILES)
# end of magic

$(SERVICESTACK_TEXT_ASSEMBLY_TARGET) $(SERVICESTACK_TEXT_ASSEMBLY_TARGET).mdb: $(SERVICESTACK_TEXT_BUILD_FILE) $(SERVICESTACK_TEXT_SOURCE_FILES)
	$(XBUILD) $(SERVICESTACK_TEXT_XBUILD_FLAGS) $(SERVICESTACK_TEXT_BUILD_FILE)

$(SERVICESTACK_INTERFACES_ASSEMBLY_TARGET) $(SERVICESTACK_INTERFACES_ASSEMBLY_TARGET).mdb: $(SERVICESTACK_INTERFACES_BUILD_FILE) $(SERVICESTACK_INTERFACES_SOURCE_FILES)
	$(XBUILD) $(SERVICESTACK_INTERFACES_XBUILD_FLAGS) $(SERVICESTACK_INTERFACES_BUILD_FILE)

$(SERVICESTACK_COMMON_ASSEMBLY_TARGET) $(SERVICESTACK_COMMON_ASSEMBLY_TARGET).mdb: $(SERVICESTACK_TEXT_ASSEMBLY_TARGET) $(SERVICESTACK_COMMON_BUILD_FILE) $(SERVICESTACK_COMMON_SOURCE_FILES)
	$(XBUILD) $(SERVICESTACK_COMMON_XBUILD_FLAGS) $(SERVICESTACK_COMMON_BUILD_FILE)

$(JSON_ASSEMBLY_TARGET) $(JSON_ASSEMBLY_TARGET).mdb: $(JSON_BUILD_FILE) $(JSON_SOURCE_FILES)
	$(XBUILD) $(JSON_XBUILD_FLAGS) $(JSON_BUILD_FILE)

$(TWITTERIZER_ASSEMBLY_TARGET) $(TWITTERIZER_ASSEMBLY_TARGET).mdb: $(TWITTERIZER_BUILD_FILE) $(TWITTERIZER_SOURCE_FILES)
	$(XBUILD) $(TWITTERIZER_XBUILD_FLAGS) $(TWITTERIZER_BUILD_FILE)

$(JABBER_NET_ASSEMBLY_TARGET) $(JABBER_NET_ASSEMBLY_TARGET).mdb: $(JABBER_NET_BUILD_FILE) $(JABBER_NET_SOURCE_FILES)
	$(XBUILD) $(JABBER_NET_XBUILD_FLAGS) $(JABBER_NET_BUILD_FILE)

$(DB4O_ASSEMBLY_TARGET) $(DB4O_ASSEMBLY_TARGET).mdb: $(DB4O_BUILD_FILE) $(DB4O_SOURCE_FILES)
	$(XBUILD) $(DB4O_XBUILD_FLAGS) $(DB4O_BUILD_FILE)

#$(DB4O_INSTR_ASSEMBLY_TARGET) $(DB4O_INSTR_ASSEMBLY_TARGET).mdb: $(DB4O_INSTR_BUILD_FILE) $(DB4O_INSTR_SOURCE_FILES)
#	$(XBUILD) $(DB4O_INSTR_XBUILD_FLAGS) $(DB4O_INSTR_BUILD_FILE)

#$(DB4O_NQ_ASSEMBLY_TARGET) $(DB4O_NQ_ASSEMBLY_TARGET).mdb: $(DB4O_NQ_BUILD_FILE) $(DB4O_NQ_SOURCE_FILES)
#	$(XBUILD) $(DB4O_NQ_XBUILD_FLAGS) $(DB4O_NQ_BUILD_FILE)

$(SIGNALR_CLIENT_ASSEMBLY_TARGET) $(SIGNALR_CLIENT_ASSEMBLY_TARGET).mdb: $(SIGNALR_CLIENT_BUILD_FILE) $(SIGNALR_CLIENT_SOURCE_FILES)
	$(XBUILD) $(SIGNALR_CLIENT_XBUILD_FLAGS) $(SIGNALR_CLIENT_BUILD_FILE)

$(JABBR_CLIENT_ASSEMBLY_TARGET) $(JABBR_CLIENT_ASSEMBLY_TARGET).mdb: $(JABBR_CLIENT_BUILD_FILE) $(JABBR_CLIENT_SOURCE_FILES)
	$(XBUILD) $(JABBR_CLIENT_XBUILD_FLAGS) $(JABBR_CLIENT_BUILD_FILE)

clean-local:
	$(XBUILD) $(SERVICESTACK_TEXT_XBUILD_FLAGS) /t:Clean $(SERVICESTACK_TEXT_BUILD_FILE)
	$(XBUILD) $(SERVICESTACK_INTERFACES_XBUILD_FLAGS) /t:Clean $(SERVICESTACK_INTERFACES_BUILD_FILE)
	$(XBUILD) $(SERVICESTACK_COMMON_XBUILD_FLAGS) /t:Clean $(SERVICESTACK_COMMON_BUILD_FILE)
if ENABLE_ENGINE_TWITTER
	$(XBUILD) $(JSON_XBUILD_FLAGS) /t:Clean $(JSON_BUILD_FILE)
	$(XBUILD) $(TWITTERIZER_XBUILD_FLAGS) /t:Clean $(TWITTERIZER_BUILD_FILE)
endif
if ENABLE_ENGINE_XMPP
	$(XBUILD) $(JABBER_NET_XBUILD_FLAGS) /t:Clean $(JABBER_NET_BUILD_FILE)
endif
if ENABLE_ENGINE_JABBR
	$(XBUILD) $(JSON_XBUILD_FLAGS) /t:Clean $(JSON_BUILD_FILE)
	$(XBUILD) $(SIGNALR_CLIENT_XBUILD_FLAGS) /t:Clean $(SIGNALR_CLIENT_BUILD_FILE)
	$(XBUILD) $(JABBR_CLIENT_XBUILD_FLAGS) /t:Clean $(JABBR_CLIENT_BUILD_FILE)
endif
if BUNDLE_DB4O
	$(XBUILD) $(DB4O_XBUILD_FLAGS) /t:Clean $(DB4O_BUILD_FILE)
#	$(XBUILD) $(DB4O_INSTR_XBUILD_FLAGS) /t:Clean $(DB4O_INSTR_BUILD_FILE)
#	$(XBUILD) $(DB4O_NQ_XBUILD_FLAGS) /t:Clean $(DB4O_NQ_BUILD_FILE)
endif

distdir: $(DISTFILES) $(DIST_SUBDIRS)
	$(am__remove_distdir)
	test -d "$(distdir)" || mkdir "$(distdir)"
	@for DISTFILE in $(DISTFILES); do \
		if [ -d "$$DISTFILE" ]; then \
			mkdir -p $(distdir)/$(srcdir)/$$DISTFILE; \
			rsync -a \
				--prune-empty-dirs \
				--include='*/' \
				--include='*.cs' \
				--exclude='*' \
				$$DISTFILE/ $(distdir)/$(srcdir)/$$DISTFILE; \
		else \
			DISTFILES="$$DISTFILES $$DISTFILE"; \
		fi \
	done; \
	srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list="$$DISTFILES"; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
		  -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -z "$$file"; then continue; fi; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
		dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
		if test -d "$(distdir)/$$file"; then \
		  find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
		fi; \
		if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
		  cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
		  find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
		fi; \
		cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
		test -f "$(distdir)/$$file" \
		|| cp -p $$d/$$file "$(distdir)/$$file" \
		|| exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(MKDIR_P) "$(distdir)/$$subdir" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
